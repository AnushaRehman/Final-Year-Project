function out = model
%
% Untitled.m
%
% Model exported on Oct 14 2020, 23:53 by COMSOL 5.3.1.229.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('C:\Users\Anusha\Desktop\FYP-WORKING\Final-Year-Project\simulation');

model.component.create('comp1', true);

model.component('comp1').geom.create('geom1', 2);

model.component('comp1').mesh.create('mesh1');

model.component('comp1').physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');

model.study.create('std1');
model.study('std1').create('wave', 'Wavelength');
model.study('std1').feature('wave').set('solnum', 'auto');
model.study('std1').feature('wave').set('notsolnum', 'auto');
model.study('std1').feature('wave').set('ngen', '5');
model.study('std1').feature('wave').activate('ewfd', true);

model.param.set('theta0', '(theta)*(pi/180)', 'Input fiber angle (radians)');
model.param.set('n_air', '1.0', 'Refractive Index of Air');
model.param.set('n_substrate', '1.45', 'Refractive Index of substrate');
model.param.set('theta', '10', 'Input fiber angle (degrees)');
model.param.set('lambda', '1550[nm]', 'Operating Laser Wavelength');
model.param.set('tm', '201[nm]', 'Thickness of material (silicon)');
model.param.set('ts', '3[um]', 'Thickness of substrate');
model.param.set('h_clad', '3[um]', 'Cladding Height (Distance between laser in grating)');
model.param.set('a', '550[nm]', 'Unetched region');
model.param.set('W', '660[nm]', 'Grating Period');
model.param.set('ff', 'a/W', 'Fill Factor');
model.param.set('f0', 'c_const/lambda', 'Operating Laser Frequency');

model.component('comp1').geom('geom1').lengthUnit('nm');
model.component('comp1').geom('geom1').angularUnit('rad');
model.component('comp1').geom('geom1').angularUnit('deg');
model.component('comp1').geom('geom1').create('r1', 'Rectangle');
model.component('comp1').geom('geom1').feature('r1').label('substrate');
model.component('comp1').geom('geom1').feature('r1').set('size', {'W' 'ts'});
model.component('comp1').geom('geom1').runPre('fin');
model.component('comp1').geom('geom1').run('r1');
model.component('comp1').geom('geom1').create('r2', 'Rectangle');
model.component('comp1').geom('geom1').feature('r2').label('grating');
model.component('comp1').geom('geom1').feature('r2').set('size', {'a' 'tm'});
model.component('comp1').geom('geom1').run('r2');
model.component('comp1').geom('geom1').feature('r2').set('pos', {'W/2 - a/2' 'ts'});
model.component('comp1').geom('geom1').run('r2');
model.component('comp1').geom('geom1').run('r2');
model.component('comp1').geom('geom1').create('r3', 'Rectangle');
model.component('comp1').geom('geom1').feature('r3').label('cladding');
model.component('comp1').geom('geom1').feature('r3').set('size', {'W' 'h_clad'});
model.component('comp1').geom('geom1').feature('r3').set('pos', {'0' 'ts'});
model.component('comp1').geom('geom1').run('r3');
model.component('comp1').geom('geom1').run('fin');

model.component('comp1').material.create('mat1', 'Common');
model.component('comp1').material('mat1').label('Silicon');
model.component('comp1').material('mat1').set('family', 'custom');
model.component('comp1').material('mat1').set('lighting', 'cooktorrance');
model.component('comp1').material('mat1').set('specular', 'custom');
model.component('comp1').material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.component('comp1').material('mat1').set('fresnel', 0.9);
model.component('comp1').material('mat1').set('roughness', 0.1);
model.component('comp1').material('mat1').set('shininess', 200);
model.component('comp1').material('mat1').set('diffuse', 'custom');
model.component('comp1').material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.component('comp1').material('mat1').set('ambient', 'custom');
model.component('comp1').material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.component('comp1').material('mat1').set('fresnel', 0.7);
model.component('comp1').material('mat1').set('roughness', 0.5);
model.component('comp1').material('mat1').propertyGroup('def').set('relpermeability', '1');
model.component('comp1').material('mat1').propertyGroup('def').set('electricconductivity', '1e-12[S/m]');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '2.6e-6[1/K]');
model.component('comp1').material('mat1').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.component('comp1').material('mat1').propertyGroup('def').set('relpermittivity', '11.7');
model.component('comp1').material('mat1').propertyGroup('def').set('density', '2329[kg/m^3]');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalconductivity', '130[W/(m*K)]');
model.component('comp1').material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.component('comp1').material('mat1').propertyGroup('Enu').set('poissonsratio', '0.28');
model.component('comp1').material('mat1').propertyGroup('Enu').set('youngsmodulus', '170e9[Pa]');
model.component('comp1').material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('mat1').propertyGroup('RefractiveIndex').set('n', '3.48');
model.component('comp1').material('mat1').selection.geom(2);
model.component('comp1').material('mat1').selection.set([]);
model.component('comp1').material('mat1').selection.geom('geom1', 2);
model.component('comp1').material('mat1').selection.set([3]);
model.component('comp1').material('mat1').set('family', 'custom');
model.component('comp1').material('mat1').set('lighting', 'cooktorrance');
model.component('comp1').material('mat1').set('specular', 'custom');
model.component('comp1').material('mat1').set('customspecular', [0.7843137254901961 1 1]);
model.component('comp1').material('mat1').set('fresnel', 0.9);
model.component('comp1').material('mat1').set('roughness', 0.1);
model.component('comp1').material('mat1').set('shininess', 200);
model.component('comp1').material('mat1').set('diffuse', 'custom');
model.component('comp1').material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.component('comp1').material('mat1').set('ambient', 'custom');
model.component('comp1').material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.component('comp1').material('mat1').set('fresnel', 0.7);
model.component('comp1').material('mat1').set('roughness', 0.5);
model.component('comp1').material.create('mat2', 'Common');
model.component('comp1').material('mat2').label('Air');
model.component('comp1').material('mat2').set('family', 'air');
model.component('comp1').material('mat2').propertyGroup('def').set('relpermeability', '1');
model.component('comp1').material('mat2').propertyGroup('def').set('relpermittivity', '1');
model.component('comp1').material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T[1/K])[Pa*s]');
model.component('comp1').material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.component('comp1').material('mat2').propertyGroup('def').set('electricconductivity', '0[S/m]');
model.component('comp1').material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T[1/K])[J/(kg*K)]');
model.component('comp1').material('mat2').propertyGroup('def').set('density', 'rho(pA[1/Pa],T[1/K])[kg/m^3]');
model.component('comp1').material('mat2').propertyGroup('def').set('thermalconductivity', 'k(T[1/K])[W/(m*K)]');
model.component('comp1').material('mat2').propertyGroup('def').set('soundspeed', 'cs(T[1/K])[m/s]');
model.component('comp1').material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('funcname', 'eta');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('extrap', 'constant');
model.component('comp1').material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.component('comp1').material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('funcname', 'Cp');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('extrap', 'constant');
model.component('comp1').material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.component('comp1').material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('funcname', 'rho');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('dermethod', 'manual');
model.component('comp1').material('mat2').propertyGroup('def').func('rho').set('argders', {'pA' 'd(pA*0.02897/R_const/T,pA)'; 'T' 'd(pA*0.02897/R_const/T,T)'});
model.component('comp1').material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('funcname', 'k');
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('extrap', 'constant');
model.component('comp1').material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.component('comp1').material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('funcname', 'cs');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*287*T)');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('dermethod', 'manual');
model.component('comp1').material('mat2').propertyGroup('def').func('cs').set('argders', {'T' 'd(sqrt(1.4*287*T),T)'});
model.component('comp1').material('mat2').propertyGroup('def').addInput('temperature');
model.component('comp1').material('mat2').propertyGroup('def').addInput('pressure');
model.component('comp1').material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('mat2').propertyGroup('RefractiveIndex').set('n', '1');
model.component('comp1').material('mat2').selection.geom(2);
model.component('comp1').material('mat2').selection.set([]);
model.component('comp1').material('mat2').selection.geom('geom1', 2);
model.component('comp1').material('mat2').selection.set([2]);
model.component('comp1').material('mat2').set('family', 'air');
model.component('comp1').material.create('mat3', 'Common');
model.component('comp1').material('mat3').label('SiO2 - Silicon oxide');
model.component('comp1').material('mat3').set('family', 'plastic');
model.component('comp1').material('mat3').propertyGroup('def').set('electricconductivity', '0[S/m]');
model.component('comp1').material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', '0.5e-6[1/K]');
model.component('comp1').material('mat3').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');
model.component('comp1').material('mat3').propertyGroup('def').set('relpermittivity', '4.2');
model.component('comp1').material('mat3').propertyGroup('def').set('density', '2200[kg/m^3]');
model.component('comp1').material('mat3').propertyGroup('def').set('thermalconductivity', '1.4[W/(m*K)]');
model.component('comp1').material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.component('comp1').material('mat3').propertyGroup('Enu').set('poissonsratio', '0.17');
model.component('comp1').material('mat3').propertyGroup('Enu').set('youngsmodulus', '70e9[Pa]');
model.component('comp1').material('mat3').selection.geom(2);
model.component('comp1').material('mat3').selection.set([]);
model.component('comp1').material('mat3').selection.geom('geom1', 2);
model.component('comp1').material('mat3').selection.set([1]);
model.component('comp1').material('mat3').set('family', 'plastic');
model.component('comp1').material.create('mat4', 'Common');
model.component('comp1').material('mat4').label('Silica glass');
model.component('comp1').material('mat4').set('family', 'custom');
model.component('comp1').material('mat4').set('lighting', 'cooktorrance');
model.component('comp1').material('mat4').set('specular', 'custom');
model.component('comp1').material('mat4').set('customspecular', [1 1 1]);
model.component('comp1').material('mat4').set('diffuse', 'custom');
model.component('comp1').material('mat4').set('customdiffuse', [1 1 1]);
model.component('comp1').material('mat4').set('ambient', 'custom');
model.component('comp1').material('mat4').set('customambient', [1 1 1]);
model.component('comp1').material('mat4').set('fresnel', 0.99);
model.component('comp1').material('mat4').set('roughness', 0.02);
model.component('comp1').material('mat4').set('shininess', 200);
model.component('comp1').material('mat4').set('alpha', 1);
model.component('comp1').material('mat4').propertyGroup('def').set('relpermeability', '1');
model.component('comp1').material('mat4').propertyGroup('def').set('electricconductivity', '1e-14[S/m]');
model.component('comp1').material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', '0.55e-6[1/K]');
model.component('comp1').material('mat4').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.component('comp1').material('mat4').propertyGroup('def').set('relpermittivity', '3.75');
model.component('comp1').material('mat4').propertyGroup('def').set('density', '2203[kg/m^3]');
model.component('comp1').material('mat4').propertyGroup('def').set('thermalconductivity', '1.38[W/(m*K)]');
model.component('comp1').material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.component('comp1').material('mat4').propertyGroup('Enu').set('poissonsratio', '0.17');
model.component('comp1').material('mat4').propertyGroup('Enu').set('youngsmodulus', '73.1e9[Pa]');
model.component('comp1').material('mat4').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('mat4').propertyGroup('RefractiveIndex').set('n', '1.45');
model.component('comp1').material('mat4').selection.geom(2);
model.component('comp1').material('mat4').selection.set([]);
model.component('comp1').material('mat4').selection.geom('geom1', 2);
model.component('comp1').material('mat4').selection.set([1]);
model.component('comp1').material('mat4').set('family', 'custom');
model.component('comp1').material('mat4').set('lighting', 'cooktorrance');
model.component('comp1').material('mat4').set('specular', 'custom');
model.component('comp1').material('mat4').set('customspecular', [1 1 1]);
model.component('comp1').material('mat4').set('diffuse', 'custom');
model.component('comp1').material('mat4').set('customdiffuse', [1 1 1]);
model.component('comp1').material('mat4').set('ambient', 'custom');
model.component('comp1').material('mat4').set('customambient', [1 1 1]);
model.component('comp1').material('mat4').set('fresnel', 0.99);
model.component('comp1').material('mat4').set('roughness', 0.02);
model.component('comp1').material('mat4').set('shininess', 200);
model.component('comp1').material('mat4').set('alpha', 1);
model.component('comp1').material.remove('mat3');

model.component('comp1').physics('ewfd').create('pc1', 'PeriodicCondition', 1);
model.component('comp1').physics('ewfd').feature('pc1').selection.set([1 3 11 12]);
model.component('comp1').physics('ewfd').feature('pc1').set('PeriodicType', 'Floquet');
model.component('comp1').physics('ewfd').feature('pc1').set('Floquet_source', 'FromPeriodicPort');
model.component('comp1').physics('ewfd').create('port1', 'Port', 1);
model.component('comp1').physics('ewfd').feature('port1').selection.set([5]);
model.component('comp1').physics('ewfd').feature('port1').set('PortType', 'Periodic');
model.component('comp1').physics('ewfd').feature('port1').set('Eampl', [0 0 1]);
model.component('comp1').physics('ewfd').feature('port1').set('alpha_inc', 'theta0');
model.component('comp1').physics('ewfd').feature('port1').set('n', {'n_air' '0' '0' '0' 'n_air' '0' '0' '0' 'n_air'});
model.component('comp1').physics('ewfd').feature('port1').set('MaximumFrequency', 'UserDefined');
model.component('comp1').physics('ewfd').feature('port1').set('fmax', 'f0');

model.disableUpdates(true);
model.disableUpdates(false);

model.component('comp1').physics('ewfd').create('port2', 'Port', 1);
model.component('comp1').physics('ewfd').feature('port2').selection.set([2]);
model.component('comp1').physics('ewfd').feature('port2').set('PortType', 'Periodic');
model.component('comp1').physics('ewfd').feature('port2').set('n', {'n_substrate' '0' '0' '0' 'n_substrate' '0' '0' '0' 'n_substrate'});
model.component('comp1').physics('ewfd').feature('port2').set('Eampl', [0 0 1]);

model.component('comp1').mesh('mesh1').create('size1', 'Size');
model.component('comp1').mesh('mesh1').feature('size1').set('hauto', 1);
model.component('comp1').mesh('mesh1').feature('size').set('hauto', 1);
model.component('comp1').mesh('mesh1').run;
model.component('comp1').mesh('mesh1').feature.remove('size1');
model.component('comp1').mesh('mesh1').create('ftri1', 'FreeTri');
model.component('comp1').mesh('mesh1').feature('ftri1').selection.geom('geom1');
model.component('comp1').mesh('mesh1').run;
model.component('comp1').mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 1);
model.component('comp1').mesh('mesh1').run;
model.component('comp1').mesh('mesh1').feature.remove('ftri1');
model.component('comp1').mesh('mesh1').create('ftri1', 'FreeTri');
model.component('comp1').mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.component('comp1').mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 1);
model.component('comp1').mesh('mesh1').run;
model.component('comp1').mesh('mesh1').feature('ftri1').selection.geom('geom1');
model.component('comp1').mesh('mesh1').run;

model.study('std1').feature('wave').set('punit', 'nm');
model.study('std1').feature('wave').set('plist', 'range(1400,1,1650)');

model.sol.create('sol1');
model.sol('sol1').study('std1');

model.study('std1').feature('wave').set('notlistsolnum', 1);
model.study('std1').feature('wave').set('notsolnum', 'auto');
model.study('std1').feature('wave').set('listsolnum', 1);
model.study('std1').feature('wave').set('solnum', 'auto');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wave');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wave');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(1400,1,1650)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'nm'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'auto');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s1').set('control', 'wave');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {'' '' '' ''});
model.result('pg2').feature('glob1').set('expr', {'ewfd.Rorder_0' 'ewfd.Torder_0' 'ewfd.RTtotal' 'ewfd.Atotal'});
model.result('pg2').feature('glob1').set('descr', {'Reflectance, order 0' 'Transmittance, order 0' 'Total reflectance and transmittance' 'Absorptance'});
model.result('pg2').label('Reflectance, Transmittance, and Absorptance (ewfd)');
model.result('pg2').feature('glob1').set('titletype', 'none');
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Reflectance, transmittance, and absorptance (1)');
model.result('pg2').feature('glob1').set('xdataexpr', 'lambda0');
model.result('pg2').feature('glob1').set('xdataunit', 'nm');
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'all');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 250, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 249, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 248, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 247, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 246, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 245, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 244, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 243, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 242, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 241, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 240, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 239, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 238, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 237, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 236, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 235, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 234, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 233, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 232, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 231, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 230, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 229, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 228, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 227, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 226, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 225, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 224, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 223, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 222, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 221, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 220, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 219, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 218, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 217, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 216, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 215, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 214, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 213, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 212, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 211, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 210, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 209, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 208, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 207, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 206, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 205, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 204, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 203, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 202, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 201, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 200, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 199, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 198, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 197, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 196, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 195, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 194, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 193, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 192, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 191, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 190, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 189, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 188, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 187, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 186, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 185, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 184, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 183, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 182, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 181, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 180, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 179, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 178, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 177, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 176, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 175, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 174, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 173, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 172, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 171, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 170, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 169, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 168, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 167, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 166, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 165, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 164, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 163, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 162, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 161, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 160, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 159, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 158, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 157, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 156, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 155, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 154, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 153, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 154, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 155, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 156, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 157, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 158, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 159, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 160, 0);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg2').run;

model.label('250_1.mph');

model.result('pg2').run;
model.result('pg1').run;
i=0;
for j = 400:10:950
    
    q = num2str(j);
    model.param.set('W', [q '[nm]']);

    
    for k=0.5:0.025:0.9
        i= i + 1;
        x = j*k;
        alph = num2str(x,5);
        str = [alph, '[nm]'];
        model.param.set('a',str);

        model.component('comp1').geom('geom1').run('r1');
        model.component('comp1').geom('geom1').run('r2');
        model.component('comp1').geom('geom1').run('r3');
        model.component('comp1').geom('geom1').run('fin');
        model.component('comp1').geom('geom1').run('fin');

        model.component('comp1').mesh('mesh1').run;

        model.sol('sol1').study('std1');

        model.study('std1').feature('wave').set('notlistsolnum', 1);
        model.study('std1').feature('wave').set('notsolnum', 'auto');
        model.study('std1').feature('wave').set('listsolnum', 1);
        model.study('std1').feature('wave').set('solnum', 'auto');

        model.sol('sol1').feature.remove('s1');
        model.sol('sol1').feature.remove('v1');
        model.sol('sol1').feature.remove('st1');
        model.sol('sol1').create('st1', 'StudyStep');
        model.sol('sol1').feature('st1').set('study', 'std1');
        model.sol('sol1').feature('st1').set('studystep', 'wave');
        model.sol('sol1').create('v1', 'Variables');
        model.sol('sol1').feature('v1').set('control', 'wave');
        model.sol('sol1').create('s1', 'Stationary');
        model.sol('sol1').feature('s1').set('stol', 0.01);
        model.sol('sol1').feature('s1').create('p1', 'Parametric');
        model.sol('sol1').feature('s1').feature.remove('pDef');
        model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0'});
        model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(1400,1,1650)'});
        model.sol('sol1').feature('s1').feature('p1').set('punit', {'nm'});
        model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
        model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'auto');
        model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
        model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
        model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
        model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
        model.sol('sol1').feature('s1').feature('p1').set('probes', {});
        model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
        model.sol('sol1').feature('s1').set('control', 'wave');
        model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
        model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
        model.sol('sol1').feature('s1').create('d1', 'Direct');
        model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
        model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
        model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
        model.sol('sol1').feature('s1').feature.remove('fcDef');
        model.sol('sol1').attach('std1');
        model.sol('sol1').runAll;

        model.result('pg1').run;
        model.result('pg2').run;
        model.result('pg2').run;
        al = num2str(i);
        z = ['plot' al];
        model.result.export.create(z, 'pg2', 'glob1', 'Plot');
        model.result.export(z).set('header', false);
        model.result.export(z).set('fullprec', false);
        y = ['C:\Users\Anusha\Desktop\FYP-WORKING\Final-Year-Project\201_ts\' q '\' alph '.txt'];
        model.result.export(z).set('filename',y);
        model.result.export(z).run;

    end
end


out = model;
